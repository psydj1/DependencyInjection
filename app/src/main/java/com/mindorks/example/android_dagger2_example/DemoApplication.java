package com.mindorks.example.android_dagger2_example;

import android.app.Application;
import android.content.Context;

import com.mindorks.example.android_dagger2_example.data.DataManager;
import com.mindorks.example.android_dagger2_example.di.component.ApplicationComponent;
import com.mindorks.example.android_dagger2_example.di.component.DaggerApplicationComponent;
import com.mindorks.example.android_dagger2_example.di.module.ApplicationModule;

import javax.inject.Inject;

/**
 * Created by janisharali on 25/12/16.
 */

//Activity does not have a constructor so Android is responsible for instantiating them.
    //so use OnCreate to get the dependency because it's called when they are created

public class DemoApplication extends Application {


    protected ApplicationComponent applicationComponent;

    //Gets DataManager through DI
    @Inject
    DataManager dataManager;

    public static DemoApplication get(Context context) {
        return (DemoApplication) context.getApplicationContext();
    }

    @Override
    public void onCreate() {
        super.onCreate();

        //DaggerApplicationComponent is generated by Dagger implementing the ApplicationComponent
        //we give it the ApplicationModule class that is used to construct the dependencies
        applicationComponent = DaggerApplicationComponent
                                    .builder()
                                    .applicationModule(new ApplicationModule(this))
                                    .build();

        //to express DataManager
        applicationComponent.inject(this);
    }

    public ApplicationComponent getComponent(){
        return applicationComponent;
    }
}
